name: Process new TCX

on:
  push:
    paths:
      - 'data/**/*.tcx'
  workflow_dispatch:

jobs:
  process:
    runs-on: ubuntu-latest
    env:
      MAX_POWER: 250
      STABLE_WINDOW_S: 30
      STABLE_STD_THRESHOLD: 5
      MIN_STABLE_DURATION_S: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install package in editable mode
        run: |
          pip install --upgrade pip
          pip install -e .  # installe le projet via pyproject.toml

      - name: Validate env secret
        run: |
          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "DATABASE_URL secret is missing" >&2
            exit 1
          fi

      - name: Export env vars from secrets
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV

      - name: Process all new TCX files
        run: |
          set -e
          for f in data/*.tcx; do
            if [ ! -f "$f" ]; then
              echo "No TCX file found in data/; skipping."
              continue
            fi
            echo "=== Processing $f ==="
            # Lance le parser
            PARSER_OUTPUT=$(python -m ingest.parser --input "$f" 2>&1 || true)
            echo "$PARSER_OUTPUT" | tee parser_output.log

            if echo "$PARSER_OUTPUT" | grep -q "ALREADY_PROCESSED"; then
              SESSION_ID=$(echo "$PARSER_OUTPUT" | grep "ALREADY_PROCESSED" | awk '{print $2}')
              echo "Session $SESSION_ID already ingéré, skip analysis."
              continue
            fi

            # extraire le session_id créé
            SESSION_ID=$(echo "$PARSER_OUTPUT" | grep -Eo '[0-9a-fA-F-]{36}')
            if [ -z "$SESSION_ID" ]; then
              echo "Could not extract session ID for $f; check parser output."
              cat parser_output.log
              exit 1
            fi
            echo "Extracted session ID: $SESSION_ID"

            # lancer l'analyse uniquement si nouvelle session
            python -m processing.analysis --session-id "$SESSION_ID"
          done
